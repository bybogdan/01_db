import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { useForm } from "react-hook-form";

import { trpc } from "../utils/trpc";
import { useCallback, useEffect } from "react";
import Image from "next/image";

type FormInputs = {
  name: string;
  message?: string;
  amount: string;
  type: "INCOME" | "EXPENSE";
  currency: string;
};

const Home: NextPage = () => {
  const { register, handleSubmit, reset } = useForm<FormInputs>({
    shouldUseNativeValidation: true,
  });
  const onSubmit = async (data: FormInputs) => {
    if (!sessionData?.user?.id) {
      throw new Error("You are unauthorized");
    }
    setRecordMutation({ ...data, userId: sessionData?.user?.id });
    reset();
  };

  const { data: sessionData } = useSession();
  const { mutate: setRecordMutation, isSuccess: isSetRecordSuccess } =
    trpc.record.setRecord.useMutation();

  const { data: allRecords, refetch: refetchAllRecords } =
    trpc.record.getAll.useQuery(sessionData?.user?.id, {
      refetchInterval: false,
      refetchOnReconnect: false,
      refetchOnWindowFocus: false,
    });

  const { data: totalExpenseByCurrency, refetch: refetchTotalExpense } =
    trpc.record.totalExpense.useQuery(sessionData?.user?.id, {
      refetchInterval: false,
      refetchOnReconnect: false,
      refetchOnWindowFocus: false,
    });

  useEffect(() => {
    if (isSetRecordSuccess) {
      refetchAllRecords();
      refetchTotalExpense();
    }
  }, [isSetRecordSuccess, refetchAllRecords, refetchTotalExpense]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-slate-400">
        {sessionData?.user ? (
          <>
            <div className="flex items-center gap-2">
              <span>{sessionData.user.name}</span>
              {/* {sessionData.user.image ? (
                // eslint-disable-next-line @next/next/no-img-element
                <img
                  src={sessionData.user.image}
                  width="50"
                  height="50"
                  alt="userpic"
                />
              ) : null} */}
              <div>
                <p>Total expense</p>
                {totalExpenseByCurrency &&
                Object.entries(totalExpenseByCurrency).length ? (
                  Object.entries(totalExpenseByCurrency).map(
                    ([currency, amount], index) => (
                      <div
                        key={currency + index}
                      >{`${currency} - ${amount}`}</div>
                    )
                  )
                ) : (
                  <div>0</div>
                )}
              </div>
              <button
                className="rounded-full bg-black/10 px-10 py-3 font-semibold text-black no-underline transition hover:bg-black/20"
                onClick={() => signOut()}
              >
                sign out
              </button>
            </div>
            <div className="pt-4" />
            <form
              className="flex flex-col gap-y-2"
              onSubmit={handleSubmit(onSubmit)}
            >
              <input
                placeholder="name"
                {...register("name", {
                  required: "Please enter your first name.",
                })} // custom message
              />
              <input placeholder="message" {...register("message")} />
              <input
                placeholder="amount"
                type="number"
                {...register("amount", {
                  required: "Please enter your first name.",
                })}
              />
              <select
                placeholder="type"
                defaultValue="EXPENSE"
                {...register("type", {
                  required: "Please enter your first name.",
                })}
              >
                <option>EXPENSE</option>
                <option>INCOME</option>
              </select>
              <select
                placeholder="currency"
                defaultValue="USD"
                {...register("currency", {
                  required: "Please enter your first name.",
                })}
              >
                <option>USD</option>
                <option>GLE</option>
                <option>EUR</option>
                <option>RUB</option>
              </select>
              <button className="bg-slate-100" type="submit">
                save new record
              </button>
            </form>

            {allRecords
              ? allRecords.map((record) => (
                  <div key={record.id}>
                    <p>{record.name}</p>
                    <p>{record.message}</p>
                    <p>{record.amount}</p>
                    <p>{record.type}</p>
                    <p>{record.currency}</p>
                    <p>{record.timestamp.toString()}</p>
                  </div>
                ))
              : null}
          </>
        ) : (
          <button
            className="rounded-full bg-black/10 px-10 py-3 font-semibold text-black no-underline transition hover:bg-black/20"
            onClick={() => signIn()}
          >
            sign in
          </button>
        )}
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();
  // console.log(sessionData);
  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

// export default AuthShowcase;
