import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { useCallback, useEffect } from "react";
import { TRPCClientError } from "@trpc/client";

const Home: NextPage = () => {
  const { data: sessionData } = useSession();
  const { mutate: setRecordMutation, isSuccess: isSetRecordSuccess } =
    trpc.record.setRecord.useMutation();

  const { data: allRecords, refetch: refetchAllRecords } =
    trpc.record.getAll.useQuery(sessionData?.user?.id, {
      refetchInterval: false,
      refetchOnReconnect: false,
      refetchOnWindowFocus: false,
    });

  const saveRecord = async () => {
    if (!sessionData?.user?.id) {
      throw new Error("You are unauthorized");
    }
    setRecordMutation({
      name: "Apple",
      amount: "1",
      type: "EXPENSE",
      userId: sessionData?.user?.id,
      currency: "GEL",
    });
  };

  useEffect(() => {
    if (isSetRecordSuccess) {
      refetchAllRecords();
    }
  }, [isSetRecordSuccess, refetchAllRecords]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        {sessionData?.user ? (
          <>
            <button
              onClick={saveRecord}
              className="rounded-full bg-black/10 px-10 py-3 font-semibold text-black no-underline transition hover:bg-black/20"
            >
              save new record
            </button>
            {allRecords
              ? allRecords.map((record) => (
                  <div key={record.id}>
                    <p>{record.name}</p>
                    <p>{record.amount}</p>
                    <p>{record.currency}</p>
                    <p>{record.timestamp.toString()}</p>
                  </div>
                ))
              : null}
            <button
              className="rounded-full bg-black/10 px-10 py-3 font-semibold text-black no-underline transition hover:bg-black/20"
              onClick={() => signOut()}
            >
              sign out
            </button>
          </>
        ) : (
          <button
            className="rounded-full bg-black/10 px-10 py-3 font-semibold text-black no-underline transition hover:bg-black/20"
            onClick={() => signIn()}
          >
            sign in
          </button>
        )}
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();
  // console.log(sessionData);
  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

// export default AuthShowcase;
